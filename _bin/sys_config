#!/bin/bash -ex

# This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
# Copyright (c) 2023 Doliam
# This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
# This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

MK_FILE=$1
H_FILE=$2

unset CDPATH # ensure cd goes to the right directory and writes nothing to stdout

START_DIR=$(pwd)
mkdir -p trial
cd       trial

PYTHON2=${PYTHON2:-python2} ; PYTHON2=$(type -p $PYTHON2||:)                                              # ok if we have no python2
PYTHON=${PYTHON:-python3}   ; PYTHON=$( type -p $PYTHON    )
CXX=${CXX:-g++}             ; CXX=$(    type -p $CXX       )

#
# Python configuration (Python2 is optional)
#

for python in $PYTHON2 $PYTHON ; do
	if [ -x $python ] ; then
		eval $($python -c 'if True :
			import sys
			v = sys.version_info
			if v.major==2 :
				if v.minor<7 : exit(0)                                                                    # Python2 is optional
				pfx = "PY2"
			elif v.major==3 :
				if v.minor<6 :
					print("echo python3 version must be at least 3.6 ; exit 1")
					exit(1)
				pfx = "PY"
			else :
				print("echo unexpected python version",v.major," ; exit 1")
				exit(1)
			#
			import sysconfig
			print(pfx+"_INCLUDEDIR="+sysconfig.get_config_var("INCLUDEDIR"))
			print(pfx+"_INCLUDEPY=" +sysconfig.get_config_var("INCLUDEPY" ))
			print(pfx+"_LIB_BASE="  +sysconfig.get_config_var("LDLIBRARY" ))
			lib_dir = sysconfig.get_config_var("LIBDIR")
			if not ( (lib_dir+"/").startswith("/usr/lib/") or (lib_dir+"/").startswith("/usr/lib64/") ) :
				print(pfx+"_LIB_DIR="+lib_dir)                                                            # suppress dir as required in case of installed package
		')
	fi
done
if [ "$PY2_LIB_DIR" -a "$PY_LIB_DIR" ] ; then PY_LD_LIBRARY_PATH=$PY_LIB_DIR:$PY2_LIB_DIR                 # both present, separate with :
else                                          PY_LD_LIBRARY_PATH=$PY_LIB_DIR$PY2_LIB_DIR                  # only one is present
fi
# cancel Python2 if unusable as a library
cat <<"EOF" > python2.c
	#include <Python.h>
	int main() {
		PyObject* none = Py_None ;
	}
EOF
p2ld=$PY2_LIB_DIR
[ "$p2ld" ] && p2ld="-L$p2ld"
$CXX -o python2 -I$PY2_INCLUDEPY $p2ld python2.c -l:$PY2_LIB_BASE || PYTHON2=

#
# CXX configuration
#
[ "$CXX" != "${CXX%++*}" ] || { echo cannot recognize c++ compiler $CXX ; exit 1 ; } # ensure we can find "++" in cxx, for example gcc or clang will not work, we must use g++ and clang++
type -p $CXX >/dev/null    || { echo cannot find      c++ compiler $CXX ; exit 1 ; }

case "$($CXX --version|head -1)" in
	*clang* ) CXX_FLAVOR=clang ; v=$($CXX -dumpversion) ; [ ${v%%.*} -lt 14 ] && { echo clang version must be at least 14  ; exit 1 ; } ;;
	*g++*   ) CXX_FLAVOR=gcc   ; v=$($CXX -dumpversion) ; [ ${v%%.*} -lt 11 ] && { echo gcc   version must be at least 11  ; exit 1 ; } ;;
	*       )                                                                      echo cannot recognize c++ compiler $CXX ; exit 1     ;;
esac

$CXX -v -o /dev/null -std=c++20 -xc++ -<<< "int main(){}" 2>compiler_info
if [ $CXX_FLAVOR = gcc ] ; then
	LLP="$(grep LIBRARY_PATH= compiler_info)" # e.g. : LIBRARY_PATH=/usr/lib/x:/a/b:/c:/a/b/c/..
	LLP="${LLP#LIBRARY_PATH=}"                # e.g. : /usr/lib/x:/a/b:/c:/a/b/c/..
	LLP="$(sed 's/:/ /g' -<<< $LLP)"          # e.g. : /usr/lib/x /a/b /c /a/b/c/..
elif [ $CXX_FLAVOR = clang ] ; then
	set $(grep -- -L compiler_info)
	while [ $# != 0 ] ; do
		case $1 in
			-L  ) LLP="$LLP $2" ; shift ;;
			-L* ) LLP="$LLP ${1#-L}"    ;;
			*   )                       ;;
		esac
		shift
	done
fi
LLP="$(realpath $LLP | sort -u)"              # e.g. : /a/b /c /usr/lib/x
LINK_LIB_PATH=
for l in $LLP ; do                            # e.g. : /a/b /c (suppress standard dirs as required in case of installed package)
	case $l/ in
		/usr/lib/*  )                                   ;;
		/usr/lib64/*)                                   ;;
		*           ) LINK_LIB_PATH="$LINK_LIB_PATH $l" ;;
	esac
done

STD_INC_DIRS="$(echo $(realpath $(sed -e '1,/<.*>.*search starts/d' -e '/End of search/,$d' compiler_info)) )" # echo is used to replace \n by space

#
# HAS_SECCOMP
# test whether we have seccomp : warning, include <seccomp.h> is not enough to test, check its content too
#
cat <<"EOF" > seccomp.c
	#include <seccomp.h>
	struct scmp_version v ;
EOF
# usually seccomp.h is in /usr/include (with an internal file /usr/include/linux/seccomp.h) but some systems have seccomp.h directly installed in /usr/include/linux
if $CXX -c -idirafter /usr/include/linux -o ptrace.o -xc seccomp.c
then HAS_SECCOMP=1
else HAS_SECCOMP=0
fi

#
# MUST_UNDEF_PTRACE_MACROS
#
cat <<"EOF" > undef_ptrace_macros.c
	#include<sys/ptrace.h>
	#include<linux/ptrace.h>
	#undef PTRACE_TRACEME
	void foo() {
		long rx = ptrace(PTRACE_TRACEME,0,0,0) ;
	}
EOF
if $CXX -c -idirafter /usr/include/linux -o undef_ptrace_macros.o -xc undef_ptrace_macros.c
then MUST_UNDEF_PTRACE_MACROS=1
else MUST_UNDEF_PTRACE_MACROS=0
fi

#
# HAS_PTRACE_GET_SYSCALL_INFO
#
cat <<"EOF" > get_syscall_info.c
	#include<sys/ptrace.h>
	#include<linux/ptrace.h>
	#if MUST_UNDEF_PTRACE_MACROS
		#undef PTRACE_GET_SYSCALL_INFO
	#endif
	void foo() {
		long rx = ptrace(PTRACE_GET_SYSCALL_INFO,0,0,0) ;
	}
EOF
if $CXX -c -idirafter /usr/include/linux -DMUST_UNDEF_PTRACE_MACROS=$MUST_UNDEF_PTRACE_MACROS  -o get_syscall_info.o -xc get_syscall_info.c
then HAS_PTRACE_GET_SYSCALL_INFO=1
else HAS_PTRACE_GET_SYSCALL_INFO=0
fi

#
# HAS_CLOSE_RANGE
# test whether we can include linux/close_range.h
#
if $CXX -E --include 'linux/close_range.h' -xc - </dev/null >/dev/null 2>/dev/null
then HAS_CLOSE_RANGE=1
else HAS_CLOSE_RANGE=0
fi

#
# HAS_LD_AUDIT
# test whether LD_AUDIT environment variable is managed by dynamic linker
#
source /etc/os-release
case "$ID" in
	ubuntu)
		case "$VERSION_ID" in
			20.04) HAS_LD_AUDIT=0 ;; # Ubuntu fix : Ubuntu 20.04 seems to miss calling auditing code upon ldopen
		esac
	;;
	centos)
		case "$VERSION_ID" in
			7) HAS_LD_AUDIT=0 ;;     # CentOS7 fix : This is what would answer a real centos-7 system, but we may be running in a docker which has a more recent kernel.
		esac
	;;
esac
if [ -z "$HAS_LD_AUDIT" ] ; then
	cat <<-"EOF" > audited.c
		#include<stdio.h>
		int main() { printf("0") ; }
	EOF
	cat <<-"EOF" > ld_audit.c
		#include<stdio.h>
		#include<stdlib.h>
		unsigned int la_version(unsigned int) { printf("1") ; exit(0) ; }
	EOF
	$CXX -o audited                   -xc audited.c
	$CXX -o ld_audit.so -shared -fPIC -xc ld_audit.c
	HAS_LD_AUDIT=$(LD_AUDIT=./ld_audit.so ./audited)
fi

#
# NEED_STAT_WRAPPERS
# test whether stat syscalls are transformed into __xstat
#
cat <<"EOF" > stat.c
	#include <sys/stat.h>
	struct stat buf ;
	int main() { stat("",&buf) ; }
EOF
$CXX -o stat_trial -xc stat.c
if nm -D stat_trial | grep -wq stat
then NEED_STAT_WRAPPERS=0
else NEED_STAT_WRAPPERS=1
fi

#
# HAS_OSTRINGSTREAM_VIEW
# test whether std::ostringstream has method view()
#
cat <<"EOF" > ostringstream_view.cc
	#include <sstream>
	std::string_view ossv = std::ostringstream().view() ;
EOF
if $CXX -c -std=c++20 -o ostringstream_view.o ostringstream_view.cc
then HAS_OSTRINGSTREAM_VIEW=1
else HAS_OSTRINGSTREAM_VIEW=0
fi

#
# HAS_SLURM
#
if $CXX -E --include slurm/slurm.h -xc - </dev/null >/dev/null 2>/dev/null
then HAS_SLURM=1
else HAS_SLURM=0
fi

#
# addr2line
#
[ ""              ] || ADDR2LINE=$(find $(dirname $(realpath $CXX)) -name llvm-addr2line)
[ -x "$ADDR2LINE" ] || ADDR2LINE=$(find $(dirname $(realpath $CXX)) -name addr2line     )
[ -x "$ADDR2LINE" ] || ADDR2LINE=$(type -p addr2line)

#
# stacktrace
#
cat <<"EOF" > stacktrace.cc
	#include <stacktrace>
	std::stacktrace st ;
EOF
if $CXX -c -std=c++23 -o stacktrace.o stacktrace.cc 2>/dev/null
then HAS_STACKTRACE=1
else HAS_STACKTRACE=0
fi

#
# HAS_MEMFD
#
cat <<"EOF" > memfd.c
	#ifndef _GNU_SOURCE
		#define _GNU_SOURCE
	#endif
	#include<sys/mman.h>
	int main() { memfd_create("trial",0) ; }
EOF
if $CXX -Werror -o memfd -xc memfd.c
then HAS_MEMFD=1
else HAS_MEMFD=0
fi

#
# USE_LIBC_START_MAIN
#
cat <<"EOF" > start_main.c
	#include<unistd.h>
	int __libc_start_main( void* main , int argc , void* argv , void* auxvec , void* init , void* fini , void* rtld_fini , void* stack_end) {
		write(1,"1",1) ; // stick to very basic sycalls as nothing is initialized yet
		_exit(0) ;       // dont call main
	}
	int main() { write(1,"0",1) ; }
EOF
$CXX -o start_main -xc start_main.c
USE_LIBC_START_MAIN=$(./start_main)

#
# PCRE
#
cat <<"EOF" > pcre.cc
	#define PCRE2_CODE_UNIT_WIDTH 8
	#include <pcre2.h>
	void foo() {
		pcre2_compile(nullptr,0,PCRE2_ANCHORED|PCRE2_DOTALL|PCRE2_ENDANCHORED,nullptr,nullptr,nullptr) ;
	}
EOF
if $CXX -c -std=c++20 -o pcre.o pcre.cc 2>/dev/null
then HAS_PCRE=1
else HAS_PCRE=0
fi

cd $START_DIR

cat >$MK_FILE <<EOF
BASH           := /bin/bash
GIT            := $(type -p ${GIT:-git})
#
PYTHON2        := $PYTHON2
PY2_INCLUDEDIR := $PY2_INCLUDEDIR
PY2_INCLUDEPY  := $PY2_INCLUDEPY
PY2_LIB_DIR    := $PY2_LIB_DIR
PY2_LIB_BASE   := $PY2_LIB_BASE
PYTHON         := $PYTHON
PY_INCLUDEDIR  := $PY_INCLUDEDIR
PY_INCLUDEPY   := $PY_INCLUDEPY
PY_LIB_DIR     := $PY_LIB_DIR
PY_LIB_BASE    := $PY_LIB_BASE
#
CXX            := $CXX
CXX_FLAVOR     := $CXX_FLAVOR
LINK_LIB_PATH  := $LINK_LIB_PATH
STD_INC_DIRS   := $STD_INC_DIRS
#
HAS_PCRE       := ${HAS_PCRE#0}
HAS_SECCOMP    := ${HAS_SECCOMP#0}
HAS_SLURM      := ${HAS_SLURM#0}
#
STD_PATH       := $(env -i /bin/bash -c 'echo $PATH')
EOF

cat >$H_FILE <<EOF
	#pragma once
	#define ADDR2LINE                   "$ADDR2LINE"
	#define HAS_CLOSE_RANGE             $HAS_CLOSE_RANGE
	#define HAS_LD_AUDIT                $HAS_LD_AUDIT
	#define HAS_MEMFD                   $HAS_MEMFD
	#define HAS_OSTRINGSTREAM_VIEW      $HAS_OSTRINGSTREAM_VIEW
	#define HAS_PCRE                    $HAS_PCRE
	#define HAS_PTRACE_GET_SYSCALL_INFO $HAS_PTRACE_GET_SYSCALL_INFO
	#define HAS_SECCOMP                 $HAS_SECCOMP
	#define HAS_SLURM                   $HAS_SLURM
	#define HAS_STACKTRACE              $HAS_STACKTRACE
	#define MUST_UNDEF_PTRACE_MACROS    $MUST_UNDEF_PTRACE_MACROS
	#define NEED_STAT_WRAPPERS          $NEED_STAT_WRAPPERS
	#define PY_LD_LIBRARY_PATH          "$PY_LD_LIBRARY_PATH"
	#define PYTHON                      "$PYTHON"
	#define USE_LIBC_START_MAIN         $USE_LIBC_START_MAIN
EOF
